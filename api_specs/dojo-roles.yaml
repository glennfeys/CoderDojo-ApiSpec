openapi: 3.0.0

paths:
  /dojo-roles:
    get:
      description: View roles in a dojo (lead or coach).
      summary: View dojo-roles
      operationId: getDojoRoles
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - dojo-role
      parameters:
        - in: query
          name: dojoId
          description: Filter by dojo id
          schema:
            type: string
        - in: query
          name: userId
          description: Filter by user id
          schema:
            type: string
        - in: query
          name: role
          description: Filter by role (lead or coach)
          schema:
            $ref: "#/components/schemas/Role"
      responses:
        '200':
          description: Operation successful
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/DojoRoleList"
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DojoRoleError"
        '404':
          $ref: 'core.yaml#/components/responses/NotFoundError'
        default:
          $ref: "core.yaml#/components/responses/DefaultError"

    post:
      description: Give a user a role in this dojo. Only leads can add dojo roles. Only admins can make lead role.
      summary: Create dojo-role
      operationId: createDojoRole
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - dojo-role
      requestBody:
        $ref: "#/components/requestBodies/PostDojoRoleBody"
      responses:
        '201':
          description: Operation successful
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/DojoRole"
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DojoRoleError"
        '401':
          $ref: "core.yaml#/components/responses/UnauthorizedError"
        '404':
          $ref: 'core.yaml#/components/responses/NotFoundError'
        default:
          $ref: "core.yaml#/components/responses/DefaultError"

  /dojo-roles/{id}:
    get:
      description: Get a user that has a role in this dojo.
      summary: Get dojo-role by id
      operationId: getDojoRole
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - dojo-role
      parameters:
        - $ref: "core.yaml#/components/parameters/pathId"
      responses:
        '200':
          description: Operation successful
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/DojoRole"
        '404':
          $ref: 'core.yaml#/components/responses/NotFoundError'
        default:
          $ref: "core.yaml#/components/responses/DefaultError"

    patch:
      description:
        Meant to update the role of the user in the dojo. Only leads
        of a dojo can change dojo-roles. Only admins can patch leads role.
      summary: Update dojo-role
      operationId: patchDojoRole
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - dojo-role
      parameters:
        - $ref: "core.yaml#/components/parameters/pathId"
      requestBody:
        $ref: 'core.yaml#/components/requestBodies/PatchBody'
      responses:
        '200':
          description: Operation successful
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/DojoRole"
        '400':
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DojoRoleError"
        '401':
          $ref: "core.yaml#/components/responses/UnauthorizedError"
        '404':
          $ref: 'core.yaml#/components/responses/NotFoundError'
        default:
          $ref: "core.yaml#/components/responses/DefaultError"

    delete:
      description: Remove the role that a user has in a dojo. Only leads of a dojo can delete dojo-roles. Only admins can delete leads.
      summary: Remove user role in a dojo
      operationId: deleteDojoRole
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - dojo-role
      parameters:
        - $ref: "core.yaml#/components/parameters/pathId"
      responses:
        '204':
          description: Operation successful
        '401':
          $ref: "core.yaml#/components/responses/UnauthorizedError"
        '404':
          $ref: 'core.yaml#/components/responses/NotFoundError'
        default:
          $ref: "core.yaml#/components/responses/DefaultError"


components:
  # request bodies for the /dojo-roles route
  requestBodies:
    PostDojoRoleBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewDojoRole"

  # schemas for the /dojo-roles route
  schemas:
    Role:
      type: string
      description: Role within a dojo (lead or coach)
      enum:
        - lead
        - coach

    BasicDojoRole:
      type: object
      description: Model for a basic dojo role
      required:
        - role
      properties:
        role:
          $ref: "#/components/schemas/Role"
    
    NewDojoRole:
      allOf:
        - $ref: "#/components/schemas/BasicDojoRole"
        - type: object
          description: Model for a new dojo role
          required:
            - userId
            - dojoId
          properties:
            userId:
              type: string
              description: ID of the user
            dojoId:
              type: string
              description: ID of the dojo

    DojoRole:
      allOf:
        - $ref: "#/components/schemas/BasicDojoRole"
        - type: object
          description: Model for dojo role, linking a user, a role and a dojo
          required:
            - id
            - _links
          properties:
            id:
              type: string
              description: ID of the dojo role
            _links:
              type: object
              required:
                - self
              properties:
                self:
                  $ref: "core.yaml#/components/schemas/LinkObject"
                patch:
                  $ref: "core.yaml#/components/schemas/LinkObject"
                delete:
                  $ref: "core.yaml#/components/schemas/LinkObject"
                user:
                  $ref: "core.yaml#/components/schemas/LinkObject"
                dojo:
                  $ref: "core.yaml#/components/schemas/LinkObject"
                dojoRoles:
                  $ref: "core.yaml#/components/schemas/LinkObject"
            _templates:
              type: object
              properties:
                patch:
                  $ref: 'core.yaml#/components/schemas/FormTemplate'

    DojoRoleList:
      description: A list of dojo-roles
      type: object
      required:
        - _embedded
        - _links
      properties:
        _embedded:
          type: object
          required:
            - dojoRoles
          properties:
            dojoRoles:
              type: array
              items:
                $ref: "#/components/schemas/DojoRole"
            count:
                $ref: 'core.yaml#/components/schemas/Count'
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: "core.yaml#/components/schemas/LinkObject"
            post:
              $ref: "core.yaml#/components/schemas/LinkObject"
            root:
              $ref: "core.yaml#/components/schemas/LinkObject"
        _templates:
          type: object
          properties:
            post:
              $ref: 'core.yaml#/components/schemas/FormTemplate'

    DojoRoleError:
      allOf:
        - $ref: 'core.yaml#/components/schemas/Error'
        - type: object
          description: Error that can specify how the fields should be filled when filled in the wrong manner
          properties:
            fieldErrors:
              type: object
              properties:
                userId:
                  type: string
                dojoId:
                  type: string
                role:
                  type: string
