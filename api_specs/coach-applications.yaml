openapi: 3.0.0

paths:
  /coach-applications:
    get:
      description: Gets a list of coach applications for a dojo
      summary: Gets a (filtered) list of coach applications for a dojo
      operationId: getApplications
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - application
      parameters:
        - $ref: 'core.yaml#/components/parameters/page'
        - $ref: 'core.yaml#/components/parameters/size'
        - in: query
          name: userId
          description: Filter by user id
          schema:
            type: string
        - in: query
          name: dojoId
          description: Filter by dojo id
          schema:
            type: string
        - in: query
          name: status
          description: Filter by status
          schema:
            $ref: '#/components/schemas/CoachApplicationStatus'
      responses:
          '200':
            description: OK
            content:
              application/hal+json:
                schema:
                  $ref: '#/components/schemas/CoachApplicationList'
          '400':
            description: Invalid parameters
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetCoachApplicationsError'
          '401':
            $ref: 'core.yaml#/components/responses/UnauthorizedError'
          '404':
            $ref: 'core.yaml#/components/responses/NotFoundError'
          default:
            $ref: 'core.yaml#/components/responses/DefaultError'

    post:
      description: Creates a new application for this dojo [ninja role]
      summary: Creates a new application for this dojo [ninja role]
      operationId: createApplication
      security:
        - bearerAuth: []
      tags:
        - dojo
        - application
      parameters:
        - $ref: 'core.yaml#/components/parameters/pathId'
      requestBody:
        $ref: '#/components/requestBodies/PostCoachApplicationBody'
      responses:
        '201':
          description: Coach application successfully created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CoachApplication'
        '404':
          $ref: 'core.yaml#/components/responses/NotFoundError'
        '401':
          $ref: 'core.yaml#/components/responses/UnauthorizedError'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCoachApplicationError'
        default:
          $ref: 'core.yaml#/components/responses/DefaultError'

  /coach-applications/{id}:
    get:
      description: Gets a coach application for a dojo by id
      summary: Gets a coach application for a dojo by id
      operationId: getApplication
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - application
      parameters:
        - $ref: 'core.yaml#/components/parameters/pathId'
      responses:
          '200':
            description: OK
            content:
              application/hal+json:
                schema:
                  $ref: '#/components/schemas/CoachApplication'
          '401':
            $ref: 'core.yaml#/components/responses/UnauthorizedError'
          '404':
            $ref: 'core.yaml#/components/responses/NotFoundError'
          default:
            $ref: 'core.yaml#/components/responses/DefaultError'

    patch:
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - application
      description: Update certain values of an application
      summary: Update application
      operationId: patchApplication
      parameters:
        - $ref: "core.yaml#/components/parameters/pathId"
      requestBody:
        $ref: 'core.yaml#/components/requestBodies/PatchBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CoachApplication"
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchCoachApplicationError"
        '401':
          $ref: 'core.yaml#/components/responses/UnauthorizedError'
        '404':
          $ref: 'core.yaml#/components/responses/NotFoundError'
        default:
          $ref: 'core.yaml#/components/responses/DefaultError'

    delete:
      description: Deletes an application
      summary: Deletes an application
      operationId: deleteApplication
      x-roles: [admin, lead]
      security:
        - bearerAuth: []
      tags:
        - dojo
        - application
      parameters:
        - $ref: 'core.yaml#/components/parameters/pathId'
      responses:
          '204':
            description: Coach application successfully deleted
          '404':
            $ref: 'core.yaml#/components/responses/NotFoundError'
          '401':
            $ref: 'core.yaml#/components/responses/UnauthorizedError'
          default:
            $ref: 'core.yaml#/components/responses/DefaultError'

components:
  requestBodies:
    PostCoachApplicationBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewCoachApplication'

  schemas:
    BasicCoachApplication:
      description: Model for basic coach application
      type: object
      required:
        - status
      properties:
        message:
          type: string
          description:
            Information that can be provided by coach to support his/her
            application (e.g. the user's CV)

    NewCoachApplication:
      allOf:
        - $ref: "#/components/schemas/BasicCoachApplication"
        - type: object
          description: Model for a new coach application
          required:
            - userId
            - dojoId
          properties:
            userId:
              type: string
              description: ID of user who is applying for the coach position at the dojo
            dojoId:
              type: string
              description: ID of dojo the coach position is for

    CoachApplication:
      allOf:
        - $ref: "#/components/schemas/BasicCoachApplication"
        - type: object
          description: Model for a coach application response
          required:
            - id
            - _links
          properties:
            id:
              type: string
            status:
              $ref: '#/components/schemas/CoachApplicationStatus'
            _links:
              type: object
              properties:
                self:
                  $ref: 'core.yaml#/components/schemas/LinkObject'
                patch:
                  $ref: 'core.yaml#/components/schemas/LinkObject'
                delete:
                  $ref: 'core.yaml#/components/schemas/LinkObject'
                dojo:
                  $ref: 'core.yaml#/components/schemas/LinkObject'
                user:
                  $ref: 'core.yaml#/components/schemas/LinkObject'
                applications:
                  $ref: 'core.yaml#/components/schemas/LinkObject'
            _templates:
              type: object
              properties:
                patch:
                  $ref: 'core.yaml#/components/schemas/FormTemplate'

    CoachApplicationList:
      description: Model for a list of coach applications
      type: object
      required:
        - _embedded
        - _links
      properties:
        _embedded:
          type: object
          required:
            - applications
          properties:
            applications:
              type: array
              items:
                $ref: '#/components/schemas/CoachApplication'
            count:
              $ref: 'core.yaml#/components/schemas/Count'
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: 'core.yaml#/components/schemas/LinkObject'
            post:
              $ref: 'core.yaml#/components/schemas/LinkObject'
            root:
              $ref: 'core.yaml#/components/schemas/LinkObject'
            next:
              $ref: 'core.yaml#/components/schemas/LinkObject'
            prev:
              $ref: 'core.yaml#/components/schemas/LinkObject'
            first:
              $ref: 'core.yaml#/components/schemas/LinkObject'
            last:
              $ref: 'core.yaml#/components/schemas/LinkObject'
        _templates:
          type: object
          properties:
            post:
              $ref: 'core.yaml#/components/schemas/FormTemplate'

    CoachApplicationStatus:
      type: string
      description: Status telling how the coach application has been handled so far. Can be updated with a PATCH.
      enum:
        - pending
        - accepted
        - refused

    # Error schemas

    GetCoachApplicationsError:
      allOf:
      - $ref: 'core.yaml#/components/schemas/Error'
      - type: object
        description: Error that specifies what was wrong in the query parameters
        properties:
          fieldErrors:
            type: object
            properties:
              page:
                type: string
              size:
                type: string
              userId:
                type: string
              dojoId:
                type: string
              status:
                type: string

    PostCoachApplicationError:
      allOf:
      - $ref: 'core.yaml#/components/schemas/Error'
      - type: object
        description: Error that can specify how the fields should be filled when filled in the wrong manner
        properties:
          fieldErrors:
            type: object
            properties:
              message:
                type: string
              userId:
                type: string
              dojoId:
                type: string

    PatchCoachApplicationError:
      allOf:
      - $ref: 'core.yaml#/components/schemas/Error'
      - type: object
        description: Error that can specify how the fields should be filled when filled in the wrong manner
        properties:
          fieldErrors:
            type: object
            properties:
              message:
                type: string
              status:
                type: string
